{"version":3,"sources":["hooks/useLocalStorage.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","err","console","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","Box","fg","bg","message","class","style","App","wakeLock","setWakeLock","setWakeLockReason","lock","modes","useEffect","a","navigator","localWakeLock","request","release","checkWakeList","className","map","i","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"kNA0BeA,G,MAxBgB,SAACC,EAAKC,GACnC,MAAsCC,oBAAS,WAC7C,IACE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GACzC,OAAOG,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAEP,OADAC,QAAQC,MAAMF,GACPR,MANX,mBAAOW,EAAP,KAAoBC,EAApB,KAoBA,MAAO,CAACD,EAVS,SAAAE,GACf,IACE,IAAMC,EAAeD,aAAiBE,SAAWF,EAAMF,GAAeE,EACtED,EAAeE,GACfX,OAAOC,aAAaY,QAAQjB,EAAKO,KAAKW,UAAUH,IAChD,MAAON,GACPC,QAAQC,MAAMF,Q,OChBpB,SAASU,EAAT,GAAmC,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,QACrB,OACE,qBAAKC,MAAM,MAAMC,MAAO,CAAE,OAAQJ,EAAI,OAAQC,GAA9C,SACGC,IAqDQG,MAhDf,WACE,MAAgCvB,oBAAS,GAAzC,mBAAOwB,EAAP,KAAiBC,EAAjB,KACA,EAA4CzB,mBAAS,2BAArD,mBAAuB0B,GAAvB,WACA,EAAgB7B,EAAgB,cAAe,CAC7C,CAAEqB,GAAI,QAASC,GAAI,QAASC,QAAS,OAAQO,MAAM,GAEnD,CAAET,GAAI,QAASC,GAAI,MAAOC,QAAS,SAAUO,MAAM,KAH9CC,EAAP,oBAgCA,OA1BAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,yDACON,EADP,oBAEU,aAAcO,UAFxB,uBAGMN,GAAY,GACZC,EAAkB,6BAJxB,iCAOQM,EAAgB,KAPxB,kBAS4BD,UAAUP,SAASS,QAAQ,UATvD,cASMD,EATN,OAUMP,EAAYO,GACZN,EAAkB,IAXxB,mBAYa,WACLM,EAAcE,UACdF,EAAgB,KAChBP,GAAY,MAfpB,kCAkBMA,GAAY,GACZC,EAAkB,EAAD,IAnBvB,2DADc,uBAAC,WAAD,wBAwBdS,MAGA,qBAAKC,UAAU,MAAf,SAGE,qBAAKA,UAAU,QAAf,SACGR,EAAMS,KAAI,WAAsBC,GAAtB,IAAGpB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAIC,EAAX,EAAWA,QAAX,OACT,cAACH,EAAD,CAAKC,GAAIA,EAAIC,GAAIA,EAAIC,QAASA,Y,MCvCpBmB,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MAAM,2DCZnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDoHpB,kBAAmBhB,WACrBA,UAAUiB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLD,QAAQC,MAAMA,EAAMW,c","file":"static/js/main.e22cc089.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (err) {\n      console.error(err);\n      return initialValue;\n    }\n  });\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n\nexport default useLocalStorage;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nfunction Box({ fg, bg, message }) {\n  return (\n    <div class=\"Box\" style={{ \"--fg\": fg, \"--bg\": bg }}>\n      {message}\n    </div>\n  );\n}\n\nfunction App() {\n  const [wakeLock, setWakeLock] = useState(false);\n  const [wakeLockReason, setWakeLockReason] = useState(\"WakeLock is not enabled\");\n  const [modes] = useLocalStorage(\"onair.modes\", [\n    { fg: \"white\", bg: \"green\", message: \"FREE\", lock: true },\n    //{ fg: \"white\", bg: \"red\", message: \"LIVE\", lock: true },\n    { fg: \"white\", bg: \"red\", message: \"ON AIR\", lock: true },\n    //{ fg: \"red\", bg: \"black\", message: \"CRITIC\", lock: true },\n  ]);\n  useEffect(() => {\n    async function checkWakeList() {\n      if (!wakeLock) {\n        if (!(\"wakeLock\" in navigator)) {\n          setWakeLock(false);\n          setWakeLockReason(\"WakeLock is not available\");\n          return;\n        }\n        let localWakeLock = null;\n        try {\n          localWakeLock = await navigator.wakeLock.request(\"screen\");\n          setWakeLock(localWakeLock);\n          setWakeLockReason(\"\");\n          return () => {\n            localWakeLock.release();\n            localWakeLock = null;\n            setWakeLock(false);\n          };\n        } catch (err) {\n          setWakeLock(false);\n          setWakeLockReason(err);\n        }\n      }\n    }\n    checkWakeList();\n  });\n  return (\n    <div className=\"App\">\n      {/*<div className=\"Reason\">{wakeLockReason}</div>\n      <button className=\"Setting\">Setting</button>*/}\n      <div className=\"Pages\">\n        {modes.map(({ fg, bg, message }, i) => (\n          <Box fg={fg} bg={bg} message={message} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable compat/compat */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/serviceWorker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  if (!fetch) return;\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\nserviceWorker.unregister();\n"],"sourceRoot":""}